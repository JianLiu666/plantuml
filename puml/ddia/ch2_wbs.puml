@startwbs ch2_wbs

skinparam Shadowing false
skinparam BackgroundColor #EFF1F3
skinparam linetype ortho

<style>
arrow {
    LineColor #323232
}
node {
    Padding 6
    Margin 2
    RoundCorner 15
    LineThickness 0.0
    BackgroundColor #EFF1F3
    FontColor #333333
}
.Type_Root {
    BackgroundColor #323232
    FontColor #FFFFFF
    LineColor #323232
}
.Type1_Node {
    BackgroundColor #D3548A
    FontColor #FFFFFF
    LineColor #D3548A
}
.Type1_LeafNode {
    RoundCorner 0
    LineThickness 1.0
    LineColor #D3548A
}
.Type2_Node {
    BackgroundColor #F4B031
    FontColor #FFFFFF
    LineColor #F4B031
}
.Type2_LeafNode {
    RoundCorner 0
    LineThickness 1.0
    LineColor #F4B031
}
.Type3_Node {
    BackgroundColor #BD4231
    FontColor #FFFFFF
    LineColor #BD4231
}
.Type3_LeafNode {
    RoundCorner 0
    LineThickness 1.0
    LineColor #BD4231
}
.Type4_Node {
    BackgroundColor #0F5E8C
    FontColor #FFFFFF
    LineColor #0F5E8C
}
.Type4_LeafNode {
    RoundCorner 0
    LineThickness 1.0
    LineColor #0F5E8C
}
.Type5_Node {
    BackgroundColor #37A7A8
    FontColor #FFFFFF
    LineColor #37A7A8
}
.Type5_LeafNode {
    RoundCorner 0
    LineThickness 1.0
    LineColor #37A7A8
}
</style>

* DDIA Chapter.2 - Data Models and Query Languages<<Type_Root>>

** Relational Model vs. Document Model<<Type1_Node>>

*** 1970 年 Edgar F. Codd 提出關聯模型。
*** 是當時在商業應用中操作結構化資料的首選解決方案。
*** 其強項為 Transaction 與 batch processing。

*** The Birth of NoSQL<<Type1_Node>>
**** 源自 2009 年的一場線上開源聚會。
**** 需要比關聯模型更好的可擴展性與寫入吞吐量。
**** 掙脫 schema 帶來的限制與束縛。

*** The Object-Relational Mismatch<<Type1_Node>>
**** 大多透過 ORM 框架處理中介轉換。
**** 關聯模型相較文件模型而言，較不擅長處理一對多的資料關係。
**** JSON 非常適合描述 self-contained的資料關係。

*** Many-to-One and Many-to-Many Relationship<<Type1_Node>>
**** 關聯模型提供的正規化優勢：避免歧義、減\n少冗余、易於更新與查詢。
**** 比文件模型更擅長描述多對一的資料關係。

*** Are Document Databases Repeating History ?<<Type1_Node>>
**** 1970 年 IBM 提出的階層模型與現代的文件模型十分接近。
**** 不支援 JOIN，非常不利於多對多關係查詢。

**** The Network Model<<Type1_Node>>
***** 根據階層模型演化而來，又稱 CODASYL 模型。
***** 為了解決多對一與多對多資料關係，提出類似指標的方式關聯資料，稱為 Access Path。
***** 必須人為維護複雜的查詢算法。

**** The Relation Model<<Type1_Node>>
***** 能夠靈活且直覺的操作 CRUD。
***** 不需人工維護查詢算法，由查詢優化器自動計算。
***** 加入索引可以有效加速查詢速度。

**** Comparison to document model<<Type1_Node>>
***** 借鑑階層模型描述一對多資料關係的方式：record tree。
***** 借鑑關聯模型描述多對一資料關係的方式：foreign key。

*** Relational Versus Document Databases Today<<Type1_Node>>
**** 關聯模型適合多對一資料關係。
**** 文件模型適合一對多資料關係。

**** Which data model leads to simpler application code<<Type1_Node>>
***** 根據業務情境而定。

**** Schema flexibility in the document model<<Type1_Node>>
***** 文件模型通常為 schema on read。
***** 關聯模型通常為 schema on write。
***** 在需要 migration 時的差異尤其明顯。

**** Data locality for queries<<Type1_Node>>
***** storage locality 是把雙面刃，其保存型態通常是 encoded byte datatype。
***** 即使只是小面積修改資料，還是需要操作整份資料。
***** 但其優勢也被相繼加入到各自的 RDBMS 的產品內。

**** Convergence of document and relational databases<<Type1_Node>>
***** E.F.Codd 在 1970 年時也曾提出類似於互相融合的概念。
***** 隨著時間迭代，彼此差異逐漸縮小。

** Query Language for Data<<Type2_Node>>
*** 命令式查詢語言(Imperative)：如同程式語言。
*** 必須藉由人為維護查詢邏輯。
*** 對資料集的結構變化極為敏感。
*** 聲明式查詢語言(declarative)：如同抽象化設計。
*** 只需提供搜尋條件。
*** 透過查詢優化器提升查詢效能。
*** 不在意資料間的對應關係，保留更多優化空間，例如平行處理。

*** Declarative Queries on the Web<<Type2_Node>>
**** 聲明式查詢語言具備較高可讀性。

*** MapReduce Querying<<Type2_Node>>
**** 混合命令與聲明式的查詢語言。
**** 為可擴展性的硬體叢集服務。
**** 藉由組合來實現 SQL 中的高階查詢方式。
**** 保留更多的資料操作與維護性。

** Graph-Like Data Models<<Type3_Node>>
*** Vertex：aka Node, Entity。
*** Edge：aka Relationship, Arc。

*** Property Graphs<<Type3_Node>>
**** 任意兩個 Vertices 都可以透過一條 edge 連在一起。
**** Vertex 包含一個 UUID，以及：
**** 一組 outgoing/ingoing edges。
**** 一組 key-value pairs。
**** Edge 包含一個 UUID，以及：
**** 與之相連的 tail/head vertex。
**** 代表其意義的標籤。
**** 一組 key-value pairs。

*** The Cypher Query Language<<Type3_Node>>
**** 屬於聲明式查詢語言。

*** Graph Queries in SQL<<Type3_Node>>
**** SQL 在查詢多對多關係資料時所面臨到的問題為，我們必須知道有哪些表需要被 JOIN。
**** 圖模型可以做到用更簡潔的語法表示複雜的遞迴表達式。

*** Triple-Stores and SPARQL<<Type3_Node>>
**** (subjet, predicate, object)
**** subject 與圖模型中的 vertex 等價。
**** 當 object 為 Primitive Datatype 時，predicate 與 object 與圖模型中的 key-value pair 等價。
**** 當 object 表示為另一個 subject 時，predicate 與圖模型中的 edge 等價。

**** The semantic web<<Type3_Node>>
***** 它與 Triple-Stores 之間大概就像 JAVA 與 Javascript 之間的關係一樣。

**** The RDF data model<<Type3_Node>>
***** W3C 在 1992 年制定，希望通過統一規則描述網路資源的方式。
***** Subject = Resource，表示物件的 URI。
***** Predicate = Property，表示欲描述的特徵。
***** Object = Statement，表示其內容。

*** The SPARQL query language<<Type3_Node>>
**** Cypher 的前身，與 Cypher 極其相似。

**** Graph Databases Compared to the Network Model<<Type3_Node>>
***** CODASYL 受限 schema，無法任意關聯兩筆不同的資料。
***** 命令式查詢語言 vs. 聲明式查詢語言。
***** CODASYL 在搜尋時必須自行窮舉，圖模型可以透過查詢優化器預測。
***** CODASYL 對資料集極其敏感，維護成本較高。

*** The Foundation: Datalog<<Type3_Node>>
**** 可以說是奠定了查詢語言的前身。
**** 與 Triple-Stores 對資料模型的描述十分相似：predicate(subject, object)
**** 透過給定規則實現查詢邏輯，如同程式中的函數，可以實現自我遞迴。

@endwbs